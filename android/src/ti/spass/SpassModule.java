/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.spass;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.content.Context;

import com.samsung.android.sdk.SsdkUnsupportedException;
import com.samsung.android.sdk.pass.Spass;
import com.samsung.android.sdk.pass.SpassFingerprint;

@Kroll.module(name = "Spass", id = "ti.spass")
public class SpassModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "SpassModule";
	private static final boolean DBG = TiConfig.LOGD;

	private SpassFingerprint spassFingerprint;
	private  Context context;
	private Spass spass;
	private SpassFingerprint.IdentifyListener listener = new SpassFingerprint.IdentifyListener() {
		@Override
		public void onFinished(int eventStatus) {
			// It is called when fingerprint identification is finished.
			if (eventStatus == SpassFingerprint.STATUS_AUTHENTIFICATION_SUCCESS) {
				// Identify operation succeeded with fingerprint
			} else if (eventStatus == SpassFingerprint.STATUS_AUTHENTIFICATION_PASSWORD_SUCCESS) {
				// Identify operation succeeded with alternative password
			} else {
				// Identify operation failed with given eventStatus.
				// STATUS_TIMEOUT_FAILED
				// STATUS_USER_CANCELLED
				// STATUS_AUTHENTIFICATION_FAILED
				// STATUS_QUALITY_FAILED
				// STATUS_USER_CANCELLED_BY_TOUCH_OUTSIDE
				// STATUS_BUTTON_PRESSED
				// STATUS_OPERATION_DENIED
			}
		}

		@Override
		public void onReady() {
			// It is called when fingerprint identification is ready after
			// startIdentify() is called.
		}

		@Override
		public void onStarted() {

		}

		@Override
		public void onCompleted() {

		}

	};
	
	
	
	
	
	
	
	
	
	

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public SpassModule() {
		super();
		context = TiApplication.getInstance();
		spass = new Spass();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is
		// created
	}
	
	
	
	// Methods
	@Kroll.method
	public void init() throws SsdkUnsupportedException {
		try {
			spass.initialize(context);
		} catch (UnsupportedOperationException e) {
			//
		}	
		
		
	}

	// Properties
	@Kroll.getProperty
	public String getExampleProp() {
		Log.d(LCAT, "get example property");
		return "hello world";
	}

	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

}
